name: Publish Docker image built by nix to ghcr.io

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  get-packages:
    runs-on: ubuntu-latest

    outputs:
      packages: ${{ steps.get-packages.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: get Nix packages
        id: get-packages
        run: |
          cd nix
          list=$(nix flake show --json | jq -c '.packages."x86_64-linux" | keys')
          echo "value=${list}" >> $GITHUB_OUTPUT

  build-and-push-image:
    needs: get-packages

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.get-packages.outputs.packages) }}

    permissions:
      contents: read
      packages: write

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      #- uses: cachix/cachix-action@v14
      #  with:
      #    name: ket-containers
      #    authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Extract metadata
        id: metadata
        run: |
          cd nix
          IMAGE_NAME=$(nix eval --raw .#${{ matrix.package }}.imageName)
          IMAGE_TAG=$(nix eval --raw .#${{ matrix.package }}.imageTag)
          echo "tag=${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if the image already exists
        id: existence-check
        run: |
          if docker manifest inspect ${{ steps.metadata.outputs.tag }}; then
            echo "b=0" >> "$GITHUB_OUTPUT"
          else
            echo "b=1" >> "$GITHUB_OUTPUT"
          fi

      - if: ${{ steps.existence-check.outputs.b == '1' }}
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - if: ${{ steps.existence-check.outputs.b == '1' }}
        name: Build a Docker image
        run: |
          cd nix
          nix build .#${{ matrix.package }}
          docker load -i result

      - if: ${{ steps.existence-check.outputs.b == '1' }}
        name: Prepare stuff necessary to build and push the final image
        run: |
          docker tag ${{ steps.metadata.outputs.tag }} localhost:5000/image:dev
          docker push localhost:5000/image:dev
          mkdir ci
          echo "FROM builder" > ci/Dockerfile

      - if: ${{ steps.existence-check.outputs.b == '1' }}
        name: Build and push the final image
        uses: docker/build-push-action@v6
        with:
          context: ci
          build-contexts: |
            builder=docker-image://localhost:5000/image:dev
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tag }}
